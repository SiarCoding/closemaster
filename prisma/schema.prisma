generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  clerkId           String             @unique
  name              String?
  email             String             @unique
  company           String?            // Add this line
  profileImage      String?
  tier              String             @default("Free")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  credits           Int                @default(10)
  level             String             @default("Starter-Salesman")
  currentPhase      String             @default("Phase1")
  achievements      Achievement[]
  badges            Badge[]
  challenges        Challenge[]
  coachingSessions  CoachingSession[]
  customerNotes     CustomerNote[]
  goals             Goal[]
  kpi               Kpi?
  leaderboardScores LeaderboardScore[]
  performances      Performance[]
  resources         Resource[]
  settings          Setting[]
  subscriptions     Subscription?
  tasks             Task[]
  trainings         Training[]
}

model Kpi {
  id            Int      @id @default(autoincrement())
  userId        Int      @unique
  salesTarget   Int
  newCustomers  Int
  levelProgress Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Goal {
  id        Int       @id @default(autoincrement())
  userId    Int
  title     String
  target    Int
  progress  Int       @default(0)
  deadline  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Training {
  id              Int       @id @default(autoincrement())
  userId          Int
  type            String
  title           String
  description     String
  difficultyLevel String
  completedAt     DateTime?
  score           Int?
  feedback        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  progress        Int       @default(0)
  target          Int       @default(100)
  phase           String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Performance {
  id                  Int      @id @default(autoincrement())
  userId              Int
  date                DateTime
  callCount           Int
  averageCallDuration Int
  achievedGoals       Int
  gamificationPoints  Int
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  type                String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CoachingSession {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CustomerNote {
  id           Int      @id @default(autoincrement())
  userId       Int
  customerName String
  notes        String
  tags         String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Resource {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Setting {
  id        Int      @id @default(autoincrement())
  userId    Int
  key       String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key])
}

model Challenge {
  id           Int      @id @default(autoincrement())
  userId       Int
  title        String
  description  String
  status       String
  rewardPoints Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  difficulty   String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LeaderboardScore {
  id        Int      @id @default(autoincrement())
  userId    Int
  score     Int
  rank      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  plan      String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  time      String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Badge {
  id          Int      @id @default(autoincrement())
  userId      Int
  name        String
  description String
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Achievement {
  id          Int      @id @default(autoincrement())
  userId      Int
  name        String
  description String
  progress    Int
  target      Int
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}