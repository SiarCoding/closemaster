generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User ist das zentrale Modell, das einen Verkäufer oder Nutzer repräsentiert.
model User {
  id                Int       @id @default(autoincrement())
  clerkId           String    @unique
  name              String?
  email             String    @unique
  profileImage      String?
  tier              String    @default("Free")
  credits           Int       @default(10)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  goals             Goal[]
  trainings         Training[]
  performances      Performance[]
  coachingSessions  CoachingSession[]
  customerNotes     CustomerNote[]
  resources         Resource[]
  communityPosts    CommunityPost[]
  settings          Setting[]
}

model Goal {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  target      Int
  progress    Int      @default(0)
  deadline    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Training {
  id              Int      @id @default(autoincrement())
  userId          Int
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type            String   // e.g., "Simulation", "LearningModule", "BestPractice"
  title           String
  description     String
  difficultyLevel String
  completedAt     DateTime?
  score           Int?
  feedback        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Performance {
  id                Int      @id @default(autoincrement())
  userId            Int
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date              DateTime
  callCount         Int
  averageCallDuration Int
  achievedGoals     Int
  gamificationPoints Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model CoachingSession {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String   // e.g., "PersonalizedRecommendation", "ActionPlan", "Reflection"
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CustomerNote {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  customerName String
  notes       String
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Resource {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String   // e.g., "KnowledgeBase", "SalesMaterial", "ArgumentationAid"
  title       String
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CommunityPost {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  content     String
  type        String   // e.g., "BestPractice", "Question", "ExpertArticle"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Setting {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  key         String
  value       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, key])
}
